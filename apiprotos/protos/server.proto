syntax= "proto3";

import "dataset.proto";
import "description.proto";
import "names.proto";
import "repository.proto";
import "user.proto";

package acumio.model.server;
option java_package = "com.acumio.model.server";

message ConcatInputRequest {
  repeated string input = 1;
  string separator = 2;
}

message ConcatInputResponse {
  string concatenation = 1;
}

// Dataset API messages.
message CreateDatasetRequest {
  acumio.model.Dataset dataset = 1;
  acumio.model.MultiDescription description = 2;
}

message CreateDatasetResponse {
  // Intentionally Empty.
}

message GetDatasetRequest {
  // TODO: Support getting ACLs back with the request, similar to how
  //       we handle Descriptions.

  // One physical name should identify a single dataset. A process trying
  // to understand a query written in SQL will want to retrieve multiple
  // datasets simultaneously.
  repeated acumio.model.QualifiedName physical_name = 1;

  // If the included_description_tags has the tag "*" as the first element,
  // we get all tags. Similar for included_description_history_tags.
  repeated string included_description_tags = 2;
  repeated string included_description_history_tags = 3;
}

message GetDatasetResponse {
  // Expect one dataset per requested dataset. The return order should match
  // the requested order. Similar for the description and description_history
  // results.
  repeated acumio.model.Dataset dataset = 1;
  repeated acumio.model.MultiDescription description = 2;
  repeated acumio.model.MultiDescriptionHistory description_history = 3;
}

message RemoveDatasetRequest {
  // Locate dataset by fully-qualified name.
  acumio.model.QualifiedName name = 1;
}

message RemoveDatasetResponse {
  // Intentionally Empty.
}

message SearchDatasetsRequest {
  // TODO: Add support for getting back only subset of Dataset's attributes.
  //       For example, we might only want to get back the full names of
  //       the Datasets without the attribute details, or only want a subset
  //       of the attributes (a query engine performing a query would only
  //       want those attributes on a dataset referenced in the query).
  //       In addition, we need to handle Descriptions of Datasets and their
  //       attributes, including mechanisms for maintaining Wiki-style
  //       versioning. Finally, an Admin trying to grant privileges for
  //       a dataset should be able to see the existing ACLs.

  // When specifying the logical_name, you can use wild-cards in
  // either the name_space or the name or both. At the moment,
  // only prefix wildcards are supported.
  acumio.model.QualifiedName logical_name = 1;

  // Similar to logical_name, the physical_name can be specified
  // with wild-cards.
  acumio.model.QualifiedName physical_name = 2;

  // Keyword search may match description attributes, column names,
  // Namespace names, table names, etc.
  repeated string key_words = 3;

  bool get_descriptions = 4;
  bool get_description_histories = 5;
}

message SearchDatasetsResponse {
  // Assuming we even populate the description or description_history results,
  // the kth dataset_description corresponds to the kth dataset and similar
  // for dataset_description_history.
  repeated acumio.model.Dataset dataset = 1;
  repeated acumio.model.MultiDescription description = 2;
  repeated acumio.model.MultiDescriptionHistory description_history = 3;
  uint32 min_query_score = 4;
  bool more_results = 5;
}

message UpdateDatasetRequest {
  // The key-based lookup of the Dataset we are modifying.
  acumio.model.QualifiedName name = 1;
  // What we want to change it to.
  acumio.model.Dataset dataset = 2;
}

message UpdateDatasetResponse {
  // Intentionally Empty.
}

message UpdateDatasetWithDescriptionRequest {
  // Fully qualified name of the Dataset.
  acumio.model.QualifiedName name = 1;
  acumio.model.Dataset update = 2;
  MultiDescriptionMutationChain description_update = 3;
}

message UpdateDatasetWithDescriptionResponse {
  // Intentionally Empty.
}

message UpdateDatasetDescriptionRequest {
  // Which Dataset is getting its description updated.
  acumio.model.QualifiedName name = 1;
  MultiDescriptionMutationChain description_update = 2;
}

message UpdateDatasetDescriptionResponse {
  // Intentionally Empty.
}

// Namespace API messages.
message CreateNamespaceRequest {
  // When creating a new Namespace, note that the parent namespaces must
  // already exist before creating the child namespace.
  acumio.model.Namespace name_space = 1;
  acumio.model.Description description = 2;
}

message CreateNamespaceResponse {
  // Intentionally Empty.
}

message GetNamespaceRequest {
  string full_namespace = 1;
  bool include_description = 2;
  bool include_description_history = 3;
}

message GetNamespaceResponse {
  acumio.model.Namespace name_space = 1;
  acumio.model.Description description = 2;
  acumio.model.DescriptionHistory description_history = 3;
}

message RemoveNamespaceRequest {
  // Fully qualified Namespace.
  string namespace_name = 1;
}

message RemoveNamespaceResponse {
  // Intentionally Empty.
}

message UpdateNamespaceRequest {
  // Fully qualified Namespace.
  string namespace_name = 1;
  acumio.model.Namespace update = 2;
}

message UpdateNamespaceResponse {
  // Intentionally Empty.
}

message UpdateNamespaceWithDescriptionRequest {
  // Fully qualified Namespace.
  string namespace_name = 1;
  acumio.model.Namespace update = 2;
  acumio.model.Description updated_description = 3;
  bool clear_description = 4;
}

message UpdateNamespaceWithDescriptionResponse {
  // Intentionally Empty.
}

message UpsertNamespaceDescriptionRequest {
  // The "described" string is the fully-qualified name of the Namespace.
  string described = 1;
  // Here is the update.
  acumio.model.Description update = 2;
  // If true, we ignore the update.contents and set the contents to
  // an empty string for the Namespace description we are updating.
  bool clear_description = 3;
}

message UpsertNamespaceDescriptionResponse {
  // Intentionally Empty.
}

// Repository API Messages.
message CreateRepositoryRequest {
  acumio.model.Repository repository = 1;
  acumio.model.Description description = 2;
  // When creating a Repository, there needs to either already exist
  // a Namespace for that repository, or we need to create one to
  // go with it. The bottom line is that you cannot have a Repository
  // without having its Namespace. By setting this option, you are
  // specifying that you want to create the namespace if it does
  // not yet exist, or to update the current namespace so that it
  // is associated with this repository.
  bool create_or_associate_namespace = 3;
  // If we need to create a new namespace, we need a separator for it!
  // This provides the separator.
  string namespace_separator = 4;
}

message CreateRepositoryResponse {
  // Intentionally Empty.
}

message GetRepositoryRequest {
  // This is often a URI. In any case, repository_name should uniquely
  // identify a repository within Acumio. We "name" all repositories in Acumio.
  // Support for search by uri can occur later.
  acumio.model.QualifiedName repository_name = 1;
  bool include_description = 2;
  bool include_description_history = 3;
}

message GetRepositoryResponse {
  acumio.model.Repository repository = 1;
  acumio.model.Description description = 2;
  acumio.model.DescriptionHistory description_history = 3;
}

message ListRepositoriesRequest {
  uint32 list_max = 1;
  acumio.model.QualifiedName start_after_name = 2;
  // We can include the Descriptions for each Repository, but there
  // is no option to include DescriptionHistories.
  bool include_descriptions = 3;
}

message ListRepositoriesResponse {
  repeated acumio.model.Repository repository = 1;
  // The descriptions will only be present if include_descriptions was set to
  // true in the request. If they are present then the kth description will
  // correspond to the kth repository in this response.
  repeated acumio.model.Description description = 2;

  // Returns true if there are more results, but we reached the limit
  // in the number of returned results.
  bool more_results = 3;
}

message RemoveRepositoryRequest {
  acumio.model.QualifiedName repository_name = 1;
  // If set to true, then the listed repository will be removed even if
  // there are datasets that are presumably a part of that Repository.
  // If false, the listed repositry will only be removed if there are
  // no Datasets in the repository.
  bool force = 2;

  // If set to true, then this will attempt to also remove the associated
  // namespace for the repository. If the associated namespace also has
  // namespaces or datasets underneath it, then this will merely
  // disassociate the namespace from the dataset.
  // If false, the namespace and its sub-namespaces will still relate
  // that they are associated with a repository, but the repository will
  // simply not be registered.
  // If for whatever reason, the Repository is not removed by this process --
  // such as if force is set to false, and there are potentially orphans,
  // the namespace will remain associated with the repository.
  bool remove_or_disassociate_namespace = 3;
}

message RemoveRepositoryResponse {
  // Intentionally Empty.
}

message UpdateRepositoryRequest {
  acumio.model.QualifiedName repository_name = 1;
  acumio.model.Repository repository = 2;
  // If the operation requires that we orphan some datasets, the force
  // option allows that to happen. Otherwise, we will generate an error
  // if we try to update a repository in such a way as to cause the
  // name to change.
  // The behavior here is somewhat more constrained than with either
  // the create or remove operations: For the remove operations, we have
  // "force" and "remove_or_disassociate_namespace", while for the
  // create operation, we have "create_or_associate_namespace". The "force"
  // flag here acts as all 3 of those flags set in this case.
  // So, in the event that we are effectively changing the name of the
  // repository, this will create a new namespace matching the new name
  // if it does not exist, or if the namespace does exist, it will
  // associate it with the namespace. In addition, it will disassociate
  // itself with the pre-existing namespace, and if the pre-existing
  // namespace is empty, it will remove it.
  // If we have to create a new namespace, the separator for the new
  // namespace will match the old separator.
  bool force = 3;
}

message UpdateRepositoryResponse {
  // Intentionally Empty.
}

message UpdateRepositoryWithDescriptionRequest {
  // Fully qualified Namespace.
  acumio.model.QualifiedName repository_name = 1;
  acumio.model.Repository update = 2;
  acumio.model.Description updated_description = 3;
  bool clear_description = 4;
  // See the description of "force" for the UpdateRepositoryRequest message.
  bool force = 5;
}

message UpdateRepositoryWithDescriptionResponse {
  // Intentionally Empty.
}

message UpsertRepositoryDescriptionRequest {
  // The "described" identifies the Repository along with the type.
  acumio.model.QualifiedName described = 1;
  // Here is the update.
  acumio.model.Description update = 2;
  // If true, we ignore the update.contents and set the contents to
  // an empty string for the Repository description we are updating.
  bool clear_description = 3;
}

message UpsertRepositoryDescriptionResponse {
  // Intentionally Empty.
}

message GetSelfUserRequest {
  // Eventually, this will be an empty message; we should be able
  // to get the identity from the ServerContext (on the server
  // side).
  string user_name = 1;
}

message GetSelfUserResponse {
  acumio.model.User user = 1;
}

/**
  The API below will eventually be restricted based on Role-Type,
  with only an Admin role having access. At the moment however,
  the API is open.

  In the search criteria below, it is possible to specify more than
  one search term, and we may in fact get multiple hits for a given
  User. The effect of this will be to affect the ordering of returned
  results. When deciding the ordering of results, we apply a score
  for the match result, and higher scores are given priority.

  (Note that the exact scores are subject to change).

  An exact match on userName is worth 100 points.
  An exact match on an identity is worth 50 points.
  An exact match on an identityName is worth 40 points.

  A wild-card match on userName is worth:
     40 * (length of non-wild-carded portion of search string) /
          (length of matched userName)

  A wild-card match on identity is worth:
     20 * (length of non-wild-carded portion of search string) /
          (length of matched identityName)

  A wild-card match on identityName is worth:
     16 * (length of non-wild-carded portion of search string) /
          (length of matched identityName)

  For scores that are tied, the tie is broken by the lexical ordering
  of the userName attribute.
 */
message UserSearchRequest {
  // Use '*' as part of a string to match any sequence of characters.
  // So for example, to match all userNames, just use the string "*",
  // and to match all userNames beginning with the letter 'A', use
  // the string "A*". 
  // At the moment, wildcards can only be trailing wild-cards, providing
  // a prefix-search. If there is a non-trailing '*' in the search,
  // it is treated as a literal.
  string user_name = 1;

  // When specifying an identity, and wanting to allow for multiple
  // matches based on a single type of principal (such as, all
  // GMAIL IdentityTypes starting with the letter A), just enter
  // a name for the identity part using the '*' wildcard.
  // At the moment, wildcards can only be trailing wild-cards, providing
  // a prefix-search.
  repeated acumio.model.Principal identity = 2;
  repeated string identity_name = 3;

  // The responseLimit gives an upper bound on the number of
  // users returned.
  uint32 response_limit = 4;

  // When query results are limited by the responseLimit attribute,
  // it is often the desire to be able to page through the results
  // by issuing queries that skip the results already returned. You
  // need two pieces of information for this: the minimum query score
  // returned from the client and the userName of the last User
  // returned on prior invocations. Given a queryScoreUpperBound,
  // only scores matching or lower than the upper bound are excepted.
  // In addition, if a userNameLowerBound is presented, then for
  // users with a score matching the upper bound, those users will be
  // returned only when their name comes lexically later than the
  // upper bound.
  // So, given a user u, it will be returned iff:
  //    score(u) > 0 and
  //    (score(u) < queryScoreUpperBound or
  //     (score(u) = qeryScoreUpperBound and
  //      u.userName > userNameLowerBound))
  uint32 query_score_upper_bound = 5;
  string user_name_lower_bound = 6;
}

message UserSearchResponse {
  repeated acumio.model.User user = 1;
  uint32 min_query_score = 2;
  bool more_results = 3;
}

message CreateUserRequest {
  acumio.model.User user = 1;
  // This is optional since it is perfectly legitimate to never
  // create an Acumio password for a user. It simply means that
  // other means of authentication are going to be used.
  string acumio_password = 2;
}

message CreateUserResponse {
  // Intentionally Empty.
}

message RemoveUserRequest {
  string user_name = 1;
}

message RemoveUserResponse {
  // Intentionally Empty.
}


message UpdateUserRequest {
  string user_name_to_modify = 1;
  acumio.model.User updated_user = 2;
  bool also_update_password = 3;
  // The password should be in the clear in this message.
  // We rely on SSL to encrypt it over the wire, and then
  // we will store it encrypted in the server. This is
  // ignored if alsoUpdatePassword is false.
  string updated_acumio_password = 4;
}

message UpdateUserResponse {
  // Intentionally Empty.
}

// TODO: Consider separating these services into "micro" services, each
//       working with a subset of the APIs. Note that these would still
//       probably need to be deployed on the same machine, because of
//       the need for quick cross-service data information, but we
//       should make that determination separately.
//       Note that streaming responses - not just responses streamed
//       by virtue of getting chunks of data at a time - will
//       already need to be put on separate services. They can however,
//       still share the same memory model.
service Server {
  rpc ConcatInputs(ConcatInputRequest) returns (ConcatInputResponse) {}
// Dataset APIs.
  rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse) {}
  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse) {}
  rpc RemoveDataset(RemoveDatasetRequest) returns (RemoveDatasetResponse) {}
  rpc SearchDatasets(SearchDatasetsRequest) returns (SearchDatasetsResponse) {}
  rpc UpdateDataset(UpdateDatasetRequest) returns (UpdateDatasetResponse) {}
  rpc UpdateDatasetWithDescription(UpdateDatasetWithDescriptionRequest)
      returns (UpdateDatasetWithDescriptionResponse) {}
  rpc UpdateDatasetDescription(UpdateDatasetDescriptionRequest) returns
      (UpdateDatasetDescriptionResponse) {}
// Namespace APIs
  rpc CreateNamespace(CreateNamespaceRequest) returns
      (CreateNamespaceResponse) {}
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse) {}
  rpc RemoveNamespace(RemoveNamespaceRequest) returns
      (RemoveNamespaceResponse) {}
  rpc UpdateNamespace(UpdateNamespaceRequest) returns
      (UpdateNamespaceResponse) {}
  rpc UpdateNamespaceWithDescription(UpdateNamespaceWithDescriptionRequest)
      returns (UpdateNamespaceWithDescriptionResponse) {}
  rpc UpsertNamespaceDescription(UpsertNamespaceDescriptionRequest) returns
      (UpsertNamespaceDescriptionResponse) {}
// Repository APIs.
  rpc CreateRepository(CreateRepositoryRequest) returns
      (CreateRepositoryResponse) {}
  rpc GetRepository(GetRepositoryRequest) returns (GetRepositoryResponse) {}
  rpc ListRepositories(ListRepositoriesRequest) returns
      (ListRepositoriesResponse) {}
  rpc RemoveRepository(RemoveRepositoryRequest) returns
      (RemoveRepositoryResponse) {}
  rpc UpdateRepository(UpdateRepositoryRequest) returns
      (UpdateRepositoryResponse) {}
  rpc UpdateRepositoryWithDescription(UpdateRepositoryWithDescriptionRequest)
      returns (UpdateRepositoryWithDescriptionResponse) {}
  rpc UpsertRepositoryDescription(UpsertRepositoryDescriptionRequest) returns
      (UpsertRepositoryDescriptionResponse) {}
// User APIs.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  rpc GetSelfUser(GetSelfUserRequest) returns (GetSelfUserResponse) {}
  rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse) {}
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  rpc UserSearch(UserSearchRequest) returns (UserSearchResponse) {}
}

