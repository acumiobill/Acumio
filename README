This project is for building an Acumio Metadata server and associated
client libraries as well as a command-line utility for exercising the
client libraries. At the time of this writing, both server and client
are written in C++, though the eventual plan is to support a Java
based client as well as a Node.js client. It is unclear if we will
maintain a C++ client.

There are a few prerequisites for this process to work:

	* Google's protobuf libraries - specifically proto3
		* Currently, C++ and Java generation are required.
		* The Java libraries require JDK 1.6, but we will
		  need JDK 1.8 support anyway for SSL support in grpc.
		* Later, we will need the JavaScript libraries.
	* Google's grpc libraries
		* Currently, C++ libraries are required.
		* Later, we will additionally need to be able to generate
		  Java versions, and in order to support SSL/TSL, this will
		  require JDK 1.8.
		* Later, we will also need to be able to generate node.js
		  libraries.
	* Google's "GoogleTest" libraries
		* This is a C++ only set of libraries for testing. This
                  includes both googletest and googlemock.
	* Boost libraries
		* Currently, only "boost_program_options" is required, but
		  it costs relatively little to just install all of them.
	* An SSL Certificate. (NOT YET ENABLED).
		* For testing purposes, this can be self-signed, but we will
		  later need to get "real" ones signed from a CA signing
		  authority.
		* Getting CA signed certificates takes between minutes and
		  hours from the signing authority. For this reason, Acumio
		  will later want to become our own signing authority so
		  that we can issue certificates for our installations in
		  an automated fashion.
		* When installing certificates, it's helpful to know that
		  these typically live in /etc/ssl/certs (public key) and
		  /etc/ssl/private (private key). However, the private
		  keys are only readable by either root or members of
		  the unix group ssl-cert (at least on Ubuntu). So either,
                  the user that the Acumio server runs as has to be a member
                  of ssl-cert, or the files have to be copied (securely!)
                  somewhere that the Acumio server can read.


Installation instructions for Google's protobuf libraries is found here:
    https://github.com/google/protobuf/releases
Installation for Google's grpc libraries is found here:
    https://github.com/grpc/grpc/blob/release-0_11/INSTALL.
Installation instructions for SSL Certificates (assumes Ubuntu machine):
    https://help.ubuntu.com/lts/serverguide/certificates-and-security.html
Installation instructions for Google's googletest libraries are provided
below. Note that these instructions were only tested on Ubuntu Linux, so
may vary for other platforms. In particular, step 2 about installing cmake
is probably Debian Linux specific. (Ubuntu Linux is a Debian derivative).
    Step 1:
     *** Install via git clone the googletest source code.
     ~$ cd workingdir
     ~/workingdir$ git clone git://github.com/google/googletest googletest
      This will create the content:
        ~/workingdir/googletest/
                                CMakeLists.txt
                                googlemock/
                                     {googlemock content}
                                googletest/
                                     {googletest content}
                                README.md
                                travis.sh

    Step 2:
     *** Install cmake (Instruction assumes Debian Linux distribution).
     ~/workingdir$ sudo apt-get install cmake
    Step 3:
     *** Generate Makefile using cmake:
     ~/workingdir$ cd ~/workingdir/googletest
     ~/workingdir/googltest$ cmake CMakeLists.txt
    Step 4:
     *** Build googlemock and googletest libraries using generated Makefile.
     ~/workingdir/googletest$  make
    Step 5:
     *** Invoke 'sudo gtest_install.sh' that is now a part of this github
         repository, and will be at the same directory location as this
         README file. Note that this was tested without actually using
         an environment variable ${PATH_TO_DIR_WITH_THIS_README}, rather this
         was tested with ~/workingdir containing this README file directly.
         If that is not the case for you - i.e., if the directory where you
         installed the googletest repository is not the same as the Acumio
         repository location, just copy gtest_install.sh to your local
         directory.
    ~/workingdir/googletest$ cd ..
    ~/workdingdir$ sudo ${PATH_TO_DIR_WITH_THIS_README}/gtest_install.sh
       

Assuming these steps have been followed, and all requirements are met, it
should then be possible to build and deploy both client and server. The
overall directory structure will look something like this:

   apiprotos/
       Makefile
       {other stuff}
   AcumioServer/
       Makefile
       {other stuff}
   AcumioClient/
       Makefile
       {other stuff}

You can build using the provided Makefiles. You will need to first build
the apiprotos libraries. After the apiprotos are built, you can build
the AcumioServer and the AcumioClient in either order.

The output of the AcumioServer's Makefile is an executable:
    AcumioServer.exe
The output of the AcumioClient's Makefile is a set of libraries and an
executable:
    AcumioCommandLine.exe

If all goes well, you should be able to first start the AcumioServer.exe
by invoking it directly, then invoke the AcumioCommandLine.exe.

To build and run tests, in either the AcumioClient or AcumioServer directory,
build the target "all_tests" (i.e., "make all_tests"). This will generate
a series of .exe files in the test_objs directory.

TODO (In rough priority order):
	* Unit Tests!!
		Test infrastructure and build process are now in place,
		but we have only begun developing the actual tests.
		The tests below are the highest priority. There are some
		possible additional tests to consider, but for now, we should
		just focus on these before moving on.
		Sub Tasks:
		* Test namespace_repository.cpp
		* Test dataset_repository.cpp
		* Test repository_repository.cpp
		* Test referential_service.cpp
		* Test UserService.cpp
		* Test NamespaceService.cpp
		* Test RepositoryService.cpp
		* Test DatasetService.cpp
	* Build Target for Running All Tests
		* Currently, there is a build target to build all tests,
		* but not one to run all of them.
	* Make Thread Safe
		The underlying MemRepository class
		(AcumioServer/src/mem_repository.h)
		is most definitely *not* thread-safe so multi-system
		access is going to cause corruption. This part will
		be simple if we don't mind a performance hit. We will
		probably do the simple thing first, then switch to
		a more complex, but faster and more robust system later.
		Hence, after testing, we will want to measure performance
		and look for improvements. The performance improvements
		are lower priority -- probably around the priority of
		adding Lineage and Event APIs.
	* Integrate with Apache Atlas.
		Need details on what the certification requirements are
		for this.
	* Complete Search APIs.
		This will require some work beyond the "basic" APIs,
		and requires some research on how best to do this.
		Basic reverse indexes are the first idea, but we will
		likely want to use an external library to do this
		(solr is the only one I have heard of). Note that
		thread-safety will be required before we can complete
		search APIs because indexing should be performed
		asynchronously.
	* Add Lineage and Event APIs.
		Yes. Of course, we need these. Initially, we will just
		keep this content in-memory, however, this content has
		different requirements than the other content: we
		will eventually *not* want to keep this in-memory except
		for a memory-limited LRU Cache.
	* Fix some "Code Smells"
                This is just code cleanup.  Sub-tasks:
                   * Fix methods that exceed 40~50 lines.
                   * Make variable and method names consistent across classes.
                     (Some of this might happen in the course of operations
                      listed above).
	* Integrate with Web Front End
		Targeting the use of Angular2 with Node.js/javascript.
	* Add Retrievable and queryable Audit logging.
		Minimally, we should store every action that changes
		state, as well as login processing.
	* Fix Directory Structure.
		The current directory structure is fine for such a small
		project, but we should have a good "think" about what
		this should look like in the long term. Each directory
		should have a clearly defined area of responsibility and
		associated namespaces.
	* Add Persistence
		We need to first be able to recover state, but also,
		be able to have alternative storage - particularly for
		lineage information.
	* Add SSL Support.
		Required for an actual deployment.
	* Add Authentication Support.
		We will want to be integrated with external authenticators
		as well as internal authenticators. Note that we want
		SSL before Authentication.
	* Add error logging
		This is separate from audit logging, which should generate
		queryable messages available in our APIs. This instead,
		is about generating messages for the purposes of debugging
		our server. Need to select a decent logger for this (probably
		use boost libraries).
	* Fix Open-Source Copyright information.
		Need to check legal requirements for including open-source
		usage information. Looking so far, since the Google libraries
                would only be distributed in binary format, we do not need
                to modify any Copyright information in our files; only we
                will need to include Google's BSD-3 Copyright notice in
                any manuals or publications.
	* Add I18n Support.
		Really low on priority, but at some point, we should address
		this.

	

