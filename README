This project is for building an Acumio Metadata server and associated
client libraries as well as a command-line utility for exercising the
client libraries. At the time of this writing, both server and client
are written in C++, though the eventual plan is to support a Java
based client as well as a Node.js client. It is unclear if we will
maintain a C++ client.

There are a few prerequisites for this process to work:

	* Google's protobuf libraries - specifically proto3
		* Currently, C++ and Java generation are required.
		* The Java libraries require JDK 1.6, but we will
		  need JDK 1.8 support anyway for SSL support in grpc.
		* Later, we will need the JavaScript libraries.
	* Google's grpc libraries
		* Currently, C++ libraries are required.
		* Later, we will additionally need to be able to generate
		  Java versions, and in order to support SSL/TSL, this will
		  require JDK 1.8.
		* Later, we will also need to be able to generate node.js
		  libraries.
	* Boost libraries
		* Currently, only "boost_program_options" is required, but
		  it costs relatively little to just install all of them.
	* An SSL Certificate. (NOT YET ENABLED).
		* For testing purposes, this can be self-signed, but we will
		  later need to get "real" ones signed from a CA signing
		  authority.
		* Getting CA signed certificates takes between minutes and
		  hours from the signing authority. For this reason, Acumio
		  will later want to become our own signing authority so
		  that we can issue certificates for our installations in
		  an automated fashion.
		* When installing certificates, it's helpful to know that
		  these typically live in /etc/ssl/certs (public key) and
		  /etc/ssl/private (private key). However, the private
		  keys are only readable by either root or members of
		  the unix group ssl-cert (at least on Ubuntu). So either,
                  the user that the Acumio server runs as has to be a member
                  of ssl-cert, or the files have to be copied (securely!)
                  somewhere that the Acumio server can read.


Installation instructions for Google's protobuf libraries is found here:
    https://github.com/google/protobuf/releases
Installation for Google's grpc libraries is found here:
    https://github.com/grpc/grpc/blob/release-0_11/INSTALL.
Installation instructions for SSL Certificates (assumes Ubuntu machine):
    https://help.ubuntu.com/lts/serverguide/certificates-and-security.html

Assuming these requirements are met, it should then be possible to build
and deploy both client and server. The overall directory structure will
look something like this:

   apiprotos/
       Makefile
       {other stuff}
   AcumioServer/
       Makefile
       {other stuff}
   AcumioClient/
       Makefile
       {other stuff}

You can build using the provided Makefiles. You will need to first build
the apiprotos libraries. After the apiprotos are built, you can build
the AcumioServer and the AcumioClient in either order.

The output of the AcumioServer's Makefile is an executable:
    AcumioServer.exe
The output of the AcumioClient's Makefile is a set of libraries and an
executable:
    AcumioCommandLine.exe

If all goes well, you should be able to first start the AcumioServer.exe
by invoking it directly, then invoke the AcumioCommandLine.exe.

TODO (In rough priority order):
	* Complete Basic API definitions and implementations.
		This is nearly done for the Basic APIs, but the search
		style APIs will require extra thought. The Basic APIs
		will allow for safe crud-operations and retrieval,
		but not search. Currently, this is complete for
		User and Namespace and most complete for Repository, but not
		for Dataset. For Repository, the validation checks (i.e.,
		foreign-key type checks) still need to be completed.
		SubTasks:
			* Modify Dataset APIs to change "DatasetDescription"
			  to "MultiDescription". (Similar concept, but
			  more general).
			* Introduce MultiDescribedRepository - similar
			  to DescribedRepository.
			* Introduce DatasetRepository based on
			  MultiDescribedRepository.
			* Modify DatasetService to use DatasetRepository
			  (currently, implementation is with stubs). Have
			 stubs for Validation.
			* Specify validations.
	* Fix Acumio and Open-Source Copyright information.
		Need to check legal requirements for including open-source
		usage information. We are currently using:
		* Google's protobuf
		* Google's grpc
		* Boost libraries
	* Unit Tests!!
		This is sorely lacking. The project has been pretty small
		so far, but it will eventually get buried under its own
		weight without tests. (Probably use boost test libraries
		for this).
	* Fix some "Code Smells"
		Relation between Repository and Namespace is a bit strained.
		Either try to find a simpler model, or just clean up the
		code. Currently, the RepositoryService has some long
		methods (over 100 lines of code) and it could share some
		code with the NamespaceService.
	* Make Thread Safe
		The underlying MemRepository class
		(AcumioServer/src/mem_repository.h)
		is most definitely *not* thread-safe so multi-system
		access is going to cause corruption. This part will
		be simple if we don't mind a performance hit. We will
		probably do the simple thing first, then switch to
		a more complex, but faster and more robust system later.
		Hence, after testing, we will want to measure performance
		and look for improvements. The performance improvements
		are lower priority -- probably around the priority of
		adding Lineage and Event APIs.
	* Complete Search APIs.
		This will require some work beyond the "basic" APIs,
		and requires some research on how best to do this.
		Basic reverse indexes are the first idea, but we will
		likely want to use an external library to do this
		(solr is the only one I have heard of). Note that
		thread-safety will be required before we can complete
		search APIs because indexing should be performed
		asynchronously.
	* Integrate with Web Front End
		Targeting the use of Angular2 with Node.js/javascript.
	* Integrate with Apache Atlas.
		Need details on what the certification requirements are
		for this.
	* Add Retrievable and queryable Audit logging.
		Minimally, we should store every action that changes
		state, as well as login processing.
	* Add Lineage and Event APIs.
		Yes. Of course, we need these. Initially, we will just
		keep this content in-memory, however, this content has
		different requirements than the other content: we
		will eventually *not* want to keep this in-memory except
		for a memory-limited LRU Cache.
	* Fix Directory Structure.
		The current directory structure is fine for such a small
		project, but we should have a good "think" about what
		this should look like in the long term. Each directory
		should have a clearly defined area of responsibility and
		associated namespaces.
	* Add Persistence
		We need to first be able to recover state, but also,
		be able to have alternative storage - particularly for
		lineage information.
	* Add SSL Support.
		Required for an actual deployment.
	* Add Authentication Support.
		We will want to be integrated with external authenticators
		as well as internal authenticators. Note that we want
		SSL before Authentication.
	* Add error logging
		This is separate from audit logging, which should generate
		queryable messages available in our APIs. This instead,
		is about generating messages for the purposes of debugging
		our server. Need to select a decent logger for this (probably
		use boost libraries).
	* Add I18n Support.
		Really low on priority, but at some point, we should address
		this.

	

